{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../environments/environment.development';\nimport * as i0 from \"@angular/core\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor() {\n      this.http = inject(HttpClient);\n      this.base = environment.apiBase;\n    }\n    rsvp(payload) {\n      return this.http.post(`${this.base}/rsvp`, payload);\n    }\n    // ==== Admin auth ====\n    adminLogin(username, password) {\n      return this.http.post(`${this.base}/auth/login`, {\n        username,\n        password\n      });\n    }\n    authHeaders() {\n      const t = sessionStorage.getItem('adminToken') || '';\n      return new HttpHeaders({\n        Authorization: `Bearer ${t}`\n      });\n    }\n    deleteRsvp(id) {\n      return this.http.delete(`${this.base}/rsvp/${id}`, {\n        headers: this.authHeaders()\n      });\n    }\n    // ...\n    listRsvps(params) {\n      const options = {\n        headers: this.authHeaders(),\n        params: {}\n      };\n      if (params) {\n        if (params.attending !== undefined) options.params.attending = String(params.attending);\n        if (params.dietaryRestrictions !== undefined) options.params.dietaryRestrictions = String(params.dietaryRestrictions);\n        if (params.bus) options.params.bus = params.bus;\n        if (params.q) options.params.q = params.q;\n      }\n      return this.http.get(`${this.base}/rsvp`, options);\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ApiService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}